name: Build, Test, and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  test:
    name: Build and run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code  
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies 
        run: npm ci
        
      - name: Build Angular Application
        run: npm run build 
        
      - name: Run Unit Tests
        run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage=true 

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-artifact
          path: coverage/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/  
     

  lint:
    name: Lint and Format Code
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code  
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint || echo "Lint issues detected, but continuing..."

      - name: Run Prettier
        run: npm run format:check || echo "Prettier issues detected, but continuing..."

  build:
    name: Build/Push Docker Image and Deploy
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code  
        uses: actions/checkout@v4

      - name: Get release version
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV

      - name: Set up Docker BuildKit
        run: |
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV  
          docker buildx create --use  

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/angular-web:${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save image tag
        id: save_tag
        run: |
          echo "IMAGE_TAG=${{ secrets.DOCKERHUB_USERNAME }}/angular-web:${{ env.SHORT_SHA }}" >> $GITHUB_ENV

      - name: Debug image tag
        run: |
          echo "Image tag from build: ${{ env.IMAGE_TAG }}"

      - name: SSH into EC2 and deploy app
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            export KUBECONFIG=/home/ubuntu/k3s.yaml
            IMAGE_TAG=${{ env.IMAGE_TAG }}
            echo "Using image tag: $IMAGE_TAG"

            if ! kubectl get deployment angular-app >/dev/null 2>&1; then
              echo "Deployment not found. Injecting image and applying deployment.yaml..."
              sed "s|DOCKER_IMAGE|$IMAGE_TAG|g" /home/ubuntu/deployment.yaml > /home/ubuntu/deployment_final.yaml
              kubectl apply -f /home/ubuntu/deployment_final.yaml
            else
              echo "Deployment exists. Skipping apply."
              kubectl set image deployment/angular-app angular-container=$IMAGE_TAG
            fi

            kubectl rollout status deployment/angular-app
            kubectl get pods -l app=angular-app -o wide

  e2e:
    name: Run E2E Tests with Cypress
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Cypress Tests
        run: npx cypress run --headless --browser chrome

      - name: Upload E2E Test Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: cypress/results/         