name: Build, Test, and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code  
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies 
        run: npm ci
        
      - name: Run Unit Tests
        run: npm test -- --watch=false --code-coverage=true

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-artifact
          path: coverage/        

  lint:
    name: Lint and Format Code
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code  
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint || echo "Lint issues detected, but continuing..."

      - name: Run Prettier
        run: npm run format:check || echo "Prettier issues detected, but continuing..."

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code  
        uses: actions/checkout@v4

      - name: Get release version
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV

      - name: Set up Docker BuildKit
        run: |
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV  
          docker buildx create --use  

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/angular-web:${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save image tag to file
        run: echo "IMAGE_TAG=${{ secrets.DOCKERHUB_USERNAME }}/angular-web:${{ env.SHORT_SHA }}" >> $GITHUB_ENV  
        
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: dist/         

  # deploy:
  #   name: Deploy to EC2
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout code  
  #       uses: actions/checkout@v4

  #     - name: Retrieve image tag
  #       run: |
  #         IMAGE_TAG=$(cat image_tag.txt)
  #         echo "Using image tag: $IMAGE_TAG"

  #     - name: Update deployment.yaml with the image tag
  #       run: |
  #         sed -i "s|DOCKER_IMAGE|${{ env.IMAGE_TAG }}|g" deployment.yaml

  #     - name: Deploy using kubectl
  #       uses: appleboy/ssh-action@v0.1.0
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ${{ secrets.EC2_USERNAME }}
  #         password: ${{ secrets.EC2_PASSWORD }}
  #         port: 22
  #         script: |
  #           cd /path/to/your/kubernetes/manifests
  #           kubectl apply -f deployment.yaml

  # e2e:
  #   name: Run E2E Tests with Cypress
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: 'npm'

  #     - name: Install Dependencies
  #       run: npm ci

  #     - name: Run Cypress Tests
  #       run: npx cypress run --headless --browser chrome

  #     - name: Upload E2E Test Results Artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: e2e-test-results
  #         path: cypress/results/         